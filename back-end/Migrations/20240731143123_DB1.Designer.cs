// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using back_end;

#nullable disable

namespace back_end.Migrations
{
    [DbContext(typeof(R6SContext))]
    [Migration("20240731143123_DB1")]
    partial class DB1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("back_end.Ability", b =>
                {
                    b.Property<string>("AbilityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AbilityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Damage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AbilityId");

                    b.HasIndex("OperatorId")
                        .IsUnique()
                        .HasFilter("[OperatorId] IS NOT NULL");

                    b.ToTable("Ability");
                });

            modelBuilder.Entity("back_end.Biography", b =>
                {
                    b.Property<string>("BiographyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PshychologicalReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BiographyId");

                    b.HasIndex("OperatorId")
                        .IsUnique()
                        .HasFilter("[OperatorId] IS NOT NULL");

                    b.ToTable("Biography");
                });

            modelBuilder.Entity("back_end.Gadget", b =>
                {
                    b.Property<string>("GadgetId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<string>("GadgetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GadgetId");

                    b.ToTable("Gadget");
                });

            modelBuilder.Entity("back_end.GameMode", b =>
                {
                    b.Property<string>("GameModeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GameModeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameModeId");

                    b.ToTable("GameMode");
                });

            modelBuilder.Entity("back_end.Operator", b =>
                {
                    b.Property<string>("OperatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AbilityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BiographyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficult")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<string>("SquadId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OperatorId");

                    b.HasIndex("SideId");

                    b.HasIndex("SquadId");

                    b.ToTable("Operator");
                });

            modelBuilder.Entity("back_end.OperatorGadget", b =>
                {
                    b.Property<string>("GadgetId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuantityOfGadget")
                        .HasColumnType("int");

                    b.HasKey("GadgetId", "OperatorId");

                    b.HasIndex("OperatorId");

                    b.ToTable("OperatorGadget");
                });

            modelBuilder.Entity("back_end.OperatorWeapon", b =>
                {
                    b.Property<string>("OperatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WeaponId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OperatorId", "WeaponId");

                    b.HasIndex("WeaponId");

                    b.ToTable("OperatorWeapon");
                });

            modelBuilder.Entity("back_end.Side", b =>
                {
                    b.Property<string>("SideId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SideName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SideId");

                    b.ToTable("Side");
                });

            modelBuilder.Entity("back_end.Squad", b =>
                {
                    b.Property<string>("SquadId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SquadName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SquadId");

                    b.ToTable("Squad");
                });

            modelBuilder.Entity("back_end.Weapon", b =>
                {
                    b.Property<string>("WeaponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<string>("QuantityOfAmmo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeaponName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeaponTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WeaponId");

                    b.HasIndex("WeaponTypeId");

                    b.ToTable("Weapon");
                });

            modelBuilder.Entity("back_end.WeaponType", b =>
                {
                    b.Property<string>("WeaponTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WeaponTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WeaponTypeId");

                    b.ToTable("WeaponType");
                });

            modelBuilder.Entity("back_end.Ability", b =>
                {
                    b.HasOne("back_end.Operator", "Operator")
                        .WithOne("Ability")
                        .HasForeignKey("back_end.Ability", "OperatorId");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("back_end.Biography", b =>
                {
                    b.HasOne("back_end.Operator", "Operator")
                        .WithOne("Biography")
                        .HasForeignKey("back_end.Biography", "OperatorId");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("back_end.Operator", b =>
                {
                    b.HasOne("back_end.Side", "Side")
                        .WithMany("Operators")
                        .HasForeignKey("SideId");

                    b.HasOne("back_end.Squad", "Squad")
                        .WithMany("Operators")
                        .HasForeignKey("SquadId");

                    b.Navigation("Side");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("back_end.OperatorGadget", b =>
                {
                    b.HasOne("back_end.Gadget", "Gadget")
                        .WithMany("OperatorGadget")
                        .HasForeignKey("GadgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Operator", "Operator")
                        .WithMany("OperatorGadget")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gadget");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("back_end.OperatorWeapon", b =>
                {
                    b.HasOne("back_end.Operator", "Operator")
                        .WithMany("OperatorWeapon")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Weapon", "Weapon")
                        .WithMany("OperatorWeapon")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("back_end.Weapon", b =>
                {
                    b.HasOne("back_end.WeaponType", "WeaponType")
                        .WithMany("Weapons")
                        .HasForeignKey("WeaponTypeId");

                    b.Navigation("WeaponType");
                });

            modelBuilder.Entity("back_end.Gadget", b =>
                {
                    b.Navigation("OperatorGadget");
                });

            modelBuilder.Entity("back_end.Operator", b =>
                {
                    b.Navigation("Ability");

                    b.Navigation("Biography");

                    b.Navigation("OperatorGadget");

                    b.Navigation("OperatorWeapon");
                });

            modelBuilder.Entity("back_end.Side", b =>
                {
                    b.Navigation("Operators");
                });

            modelBuilder.Entity("back_end.Squad", b =>
                {
                    b.Navigation("Operators");
                });

            modelBuilder.Entity("back_end.Weapon", b =>
                {
                    b.Navigation("OperatorWeapon");
                });

            modelBuilder.Entity("back_end.WeaponType", b =>
                {
                    b.Navigation("Weapons");
                });
#pragma warning restore 612, 618
        }
    }
}
